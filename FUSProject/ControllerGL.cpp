#include "ControllerGL.h"



///////////////////////////////////////////////////////////////////////////////
// default contructors
///////////////////////////////////////////////////////////////////////////////
ControllerGL::ControllerGL() : model(NULL), loopFlag(false)
{  
}

ControllerGL::ControllerGL(ModelGL* model) : model(model), loopFlag(false)
{
}



///////////////////////////////////////////////////////////////////////////////
// handle WM_CLOSE
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::close()
{    
    model->Close();
    wglMakeCurrent(0, 0);             // unset RC

    DestroyWindow(handle);
    return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle WM_CREATE
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::create()
{    
  // initialize OpenGL states
  model->Init(handle);        

  return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle WM_PAINT
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::paint()
{
  model->Response();
  model->Render();        
  model->SwapBuffers();
  
  return 0;
}

///////////////////////////////////////////////////////////////////////////////
// handle WM_COMMAND
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::command(int id, int cmd, LPARAM msg)
{
    return 0;
}


///////////////////////////////////////////////////////////////////////////////
// handle Left mouse down
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::lButtonDown(WPARAM state, int x, int y)
{
  model->UpdateMouseLButton(true);
  return 0;
}


int ControllerGL::SendData(char* filename, long dataLen)
{  
  model->LoadData(filename, dataLen);
  return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle Left mouse up
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::lButtonUp(WPARAM state, int x, int y)
{
  model->UpdateMouseLButton(false);
  return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle reft mouse down
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::rButtonDown(WPARAM state, int x, int y)
{
    model->UpdateMouseRButton(true);
    return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle reft mouse up
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::rButtonUp(WPARAM state, int x, int y)
{
  model->UpdateMouseRButton(false);
  return 0;
}



///////////////////////////////////////////////////////////////////////////////
// handle WM_MOUSEMOVE
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::mouseMove(WPARAM state, int x, int y)
{
    /*if(state == MK_LBUTTON)
    {
        model->rotateCamera(x, y);
    }
    if(state == MK_RBUTTON)
    {
        model->zoomCamera(y);
    }*/

  /*static const float rotSpeed = 0.5f;

  if (mouseLButtonDown)
  {
    setXRotation(m_xRot + 8 * dmy);
    setYRotation(m_yRot + 8 * dmx);
  }
  else if (mouseRButtonDown)
  {
    setXRotation(m_xRot + 8 * dmy);
    setZRotation(m_zRot + 8 * dmx);
  }*/

    return 0;
}

int ControllerGL::mouseWheel(int state, int delta, int x, int y) 
{ 
  model->UpdateWheelPos(delta);
  
  return 0; 
}



///////////////////////////////////////////////////////////////////////////////
// handle WM_SIZE
///////////////////////////////////////////////////////////////////////////////
int ControllerGL::size(int w, int h, WPARAM wParam)
{
    model->Resize(w, h);
    model->Render();
    model->SwapBuffers();
    return 0;
}


void ControllerGL::SetInitData(HWND hWnd, SendEllipseDataFunction sendEllFunc)
{
  parentHwnd = hWnd;
  model->sendEllipseFunc = sendEllFunc;
}